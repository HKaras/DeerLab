Basics
=========================================

For both generating and fitting data, DeerLab relies on a few central quantities, which are described in this section. They include distance distributions and model functions, background and their model functions, time-domain signals, and kernels.


Distance distributions
------------------------------------------

To describe the distribution of distances between two spins, DeerLab provides many :ref:`distance distribution model functions <ddmodels>`. They can be used for generating synthetic distributions and time-domain signal, or for fitting experimental data.

To create a distance distribution, use

.. code-block:: matlab
   
        r = linspace(1.5,6,201);   % distance, in nanometers
        P = dd_gauss(r,[3 0.5]);   % Gaussian distribution, center 3 nm, fwhm 0.5 nm
        plot(r,P);

The first line generates a distance axis ``r`` as a row vector. All distances in DeerLab are taken to be in nanometers (1 nm = 10 Ã…). Negative distances are not allowed.

The second line generates the distance distribution ``P`` as a vector defined over ``r``. The function ``dd_gauss`` is one of the `distance distribution model functions <ddmodels>`_ - ``dd`` stands for "distance distibution". It takes as inputs the distance axis and a two-element parameter array (with center and width) and returns the calculated distance distribution consisting of one Gaussian, truncated to the range of ``r``. This means that outside the range ``r``, ``P`` is zero.

The distribution is normalized such that the integral over the range of the provided ``r`` equals one:

.. code-block:: matlab

        trapz(r,P)             % integral of P over r, gives 1

To get information on a particular distribution model function and its parameters, either look it up in the documentation, or do it programmatically by calling the function without input arguments

.. code-block:: matlab

        info = dd_gauss()        % obtain information on model and parameters

In addition to the the distance distribution models provided in DeerLab, you can also use your own distance distribution in vector form ``P``. For example, this might be one generated by an external program for spin label rotamer modeling.


Backgrounds
--------------------------------------------

To create time-domain signals due to inter-molecular spin-spin distances, DeerLab  provides a range of `background model functions <bgmodels>`_. All background functions start with ``bg_``.

.. code-block:: matlab

        t = linspace(-0.1,3,201);    % time, in microseconds
        lam = 0.4;                   % modulation depth
        conc = 200;                  % spin concentration, in uM
        B = bg_hom3d(t,conc,lam);    % homogeneous 3D background
        plot(t,B)

The first line generate the desired time axis. All times in DeerLab are understood to be in microseconds. The second line gives the modulation depth.

The function ``bg_hom3d`` is one of the background model functions, giving a decay due to a homogeneous three-dimensional distribution of spins. It takes as inputs the time axis, the spin concentration (in micromolar), and the modulation depth and returns the associated background decay over the times given in ``t``.

Call the background model function without inputs to get information on the model and its parameters:

.. code-block:: matlab

        info = bg_hom3d()        % obtain information on model and parameters

Time-domain signals
--------------------------------------------

To generate complete time-domain signals from a distance distribution and a background decay, use the function ``dipolarsignal``.

.. code-block:: matlab

        V = dipolarsignal(t,r,P,lam,B);   % generate dipolar signal
        plot(t,V)

With ``dipolarsignal``, it is also possible to add noise to simulated data by using the ``'NoiseLevel'`` option:

.. code-block:: matlab

        V = dipolarsignal(t,r,P,lam,B,'NoiseLevel',0.04);  % add some noise

With this, uncorrelated Gaussian noise with standard deviation given as ``'NoiseLevel'`` is added to the noise-free signal.

The function ``dipolarsignal`` also provides an option to add a phase rotation, yielding a complex-valued signal with non-zero imaginary component.

Kernel matrices
--------------------------------------------

One of the core functions of DeerLab is ``dipolarkernel``. It provides the kernel that provides the connection between the distance distribution and the time-domain signal.

.. code-block:: matlab

    t = linspace(0,3,301);     % time axis, in us
    r = linspace(2,7,301);     % distance axis, in nm
    K0 = dipolarkernel(t,r);   % dipolar kernel matrix

To obtain the time-domain signal due to a distribution ``P``, use

.. code-block:: matlab
    
    V = K0*P;

The above is the most elementary kernel, giving a time-domain signal without any background decay, and with modulation depth of 1.

The kernel can also include the background and the modulation depth. Then, the multiplication of ``P`` by ``K`` will return the complete time-domain signal. Here is an example:

.. code-block:: matlab

    lam = 0.4;
    B = bg_hom3d(t,200,lam);    
    K = dipolarkernel(t,r,lam,B);
    V = K*P;

The function ``dipolarkernel`` also has options to add an excitation bandwidth limitation, to select the internal calculation method, and more.

It is not necessary to precompute the background decay. Instead, provide ``dipolarkernel`` with a function handle to a function that takes only time and modulation depth and encapsulates all other parameters.

.. code-block:: matlab
    
    bg = @(t,lam)bg_hom3d(t,200,lam);   % define function for background
    K = dipolarkernel(t,r,lam,bg)

The use of function handles is central to DeerLab, especially when fitting experimental data.
