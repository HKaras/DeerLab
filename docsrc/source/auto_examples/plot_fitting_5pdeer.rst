.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_fitting_5pdeer.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_fitting_5pdeer.py:


Fitting a 5-pulse DEER signal with a parameter-free distribution
==================================================================

This example shows how to fit a 5-pulse DEER signal with a parameter-
free distribution, a background, and all pathways parameters


.. code-block:: python

    import numpy as np
    import matplotlib.pyplot as plt
    from deerlab import *









Generate data


.. code-block:: python

    np.random.seed(1)
    t = np.linspace(-0.1,6.5,200)    # time axis, us
    r = np.linspace(1.5,6,100)          # distance axis, ns
    param0 = [3, 0.3, 0.2, 3.5, 0.3, 0.65, 3.8, 0.2, 0.15] # parameters for three-Gaussian model
    P = dd_gauss3(r,param0)         # model distance distribution
    B = lambda t,lam: bg_hom3d(t,300,lam) # background decay
    exparam = [0.6, 0.3, 0.1, 3.2]     # parameters for 5pDEER experiment
    pathinfo = ex_5pdeer(exparam)   # pathways information

    K = dipolarkernel(t,r,pathinfo,B)
    Vexp = K@P + whitegaussnoise(t,0.005)








Now, 5pDEER data contain 3 additional parameters compared to 4pDEER (due
to the additional dipolar pathway present in the signal). However, the
refocusing time of the second dipolar pathway is very easy to constrain
and strongly helps stabilizing the fit. 

This pathway ususally refocuses at around ``t = max(t)/2``, and usually can
be even estimated from simple visual inspection of the signal. 
Thus, we can strongly constraint this parameters while leaving the
pathway amplitudes pretty unconstrained.



.. code-block:: python

    ex_lb   = [ 0,   0,   0,  max(t)/2-1] # lower bounds
    ex_ub   = [100, 100, 100, max(t)/2+1] # upper bounds
    ex_par0 = [0.5, 0.5, 0.5, max(t)/2  ] # start values








In this case we only want to set the bounds for the experiment
parameters, so we can leave the rest empty:



.. code-block:: python

    ub = [[],[],ex_ub]
    lb = [[],[],ex_lb]
    par0 = [[],[],ex_par0]








Run the fit with a 5-pulse DEER signal model


.. code-block:: python

    Vfit,Pfit,Bfit,parfit,paruq,moduq,stats = fitsignal(Vexp,t,r,'P',bg_hom3d,ex_5pdeer,par0,lb,ub,display=True)
    plt.show()


.. image:: /auto_examples/images/sphx_glr_plot_fitting_5pdeer_001.png
    :alt: plot fitting 5pdeer
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\luis\appdata\local\programs\python\python36\lib\site-packages\numpy\core\_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      return array(a, dtype, copy=False, order=order, subok=True)
    ----------------------------------------------------------------------------
    Goodness of fit
      Vexp[0]: chi2 = 1.025641  RMSD  = 0.004493
    ----------------------------------------------------------------------------
    Fitted parameters and 95%-confidence intervals
      parfit['bg'][0][0]:   298.4495821  (290.9010012, 305.9983053)  Concentration of pumped spins (uM)
      parfit['ex'][0][0]:   2.6414233  (2.6217640, 2.6610838)  Amplitude of unmodulated components ()
      parfit['ex'][0][1]:   1.3196682  (1.2848191, 1.3545179)  Amplitude of 1st modulated pathway ()
      parfit['ex'][0][2]:   0.4406813  (0.4220567, 0.4593060)  Amplitude of 2nd modulated pathway ()
      parfit['ex'][0][3]:   3.2043365  (3.1985290, 3.2101455)  Refocusing time of 2nd modulated pathway (us)
    ----------------------------------------------------------------------------





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.227 seconds)


.. _sphx_glr_download_auto_examples_plot_fitting_5pdeer.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_fitting_5pdeer.py <plot_fitting_5pdeer.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_fitting_5pdeer.ipynb <plot_fitting_5pdeer.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
